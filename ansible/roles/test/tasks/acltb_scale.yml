# Set facts for the loganalizer
- set_fact:
    out_dir: /tmp/
    testname: acl
    run_dir: /tmp/

- name: Copy acl rules file
  become: true
  template: src=acl_scale_rules.j2 
            dest=/tmp/acltb_scale_rules.json

# Copy ACL config to the switch
- name: Copy ACL config file to the DUT
  copy: src="roles/test/tasks/acl/{{ item }}" dest="/tmp/"
  with_items:
    - "acltb_test_rules-del.json"

- block:
    - name: change CRM polling interval
      command: crm config polling interval 10 

    - pause:
        seconds: 80 

    - name: Get the ACL usage via CRM
      command: crm show resources acl table
      register: out

    - name: Extract out the total available acl entry count from CRM show
      set_fact:
        scale_number: "{{out.stdout_lines[11].split()}}"

    - name: Apply scalable rule set
      vars:
        command_to_run: "acl-loader update full /tmp/acltb_scale_rules.json"
        test_expect_file: expect_acl_scale_failure
        errors_expected: true
      include: roles/test/tasks/run_command_with_log_analyzer.yml

    - pause:
        seconds: 80 

    - name: Get the ACL usage via CRM
      command: crm show resources acl table
      register: out

    - name: Convert the used count value to integer
      set_fact:
        used_count: "{{count[3] | int}}"

    - debug:
      msg: "This DUT can scale up to {{ used_count }} ACL entries"

- always:
    - name: Clean up ACL rules.
      vars:
        command_to_run: "acl-loader update full /tmp/acltb_test_rules-del.json"
        errors_expected: false
      include: roles/test/tasks/run_command_with_log_analyzer.yml
